Q) How to create react project /application ?

	npx  create-react-app  myapp1


Q) How to move to the project in react?

	cd  myapp1


Q) How to run react application/ project?

	npm start 
	

React Project Structure and work flow
======================================
myapp1
|
|---node_modules 
|
|---public
	|
	|---favicon.ico 
	|---index.html
	|---manifest.json 
|
|-----src
	|
	|---index.js
	|---index.css
	|
	|---App.js
	|---App.css
	|
	|---App.test.js
|
|------package.json
|------README.md



A "node_modules" contains all dependencies and libraries installed.

A "favicon.ico" is a favrouite icon of a react application. 

A "index.html" is a main tempate of react application.

A "manifest.json " file contains metadata which is used when we install application on client mobile or computer.

A "index.js" file is a entry point.

A "index.css" file is related to index.js and it is global.

A "App.js" is a parent component.

A "App.css" file is related to App.js and it is global.

A "App.test.js" file is releted to unit testing.

A "package.json" file contains dependencies along with versions.


Note:
	index.html 	- main template 
	index.js 	- entry point
	App.js 		- parent component 
	package.json 	- dependencies with versions 


Work flow
=========
	         code load to             render to                output 			
	App.js  --------------> index.js  ----------> index.html -------------> Browser 



	
Steps to develop second application in react
=============================================
step1:
-----
	create a react application i.e myapp2.
	ex:
		ReactProjects> npx  create-react-app myapp2 

step2:
------
	Open the VSC editor.
	ex:
		ReactProjects> code . 

step3:
------
	Switch to myapp2 project.
	ex:
		ReactProjects> cd  myapp2

step4:
------
	Run the react application.
	ex:
		ReactProjects/myapp2> npm start 

step5:
-------
	Test the application by using below request url.
	ex:
		http://localhost:3000
step6:
-----
	Write below code in App.js file.


Approach1
----------
App.js
-------
function App()
{
  return(
    <h1>I Love ReactJS </h1>
  )
}
export default App;


Approach2
---------

App.js
------
var App=function(){
  
  return(
    <h1>I Love ReactJS Programming</h1>
  )
}
export default App;

Approach3
----------

App.js
------
var App=()=>{
  
  return(
    <h1>I Love ReactJS Programming and Development</h1>
  )
}
export default App;

React is mainly used to develop reusable components.

ex:

App.js
------
function App() {
  return (
    <h1>
      React Example for Reusability
    </h1>
  )
}
export default App

index.js
--------
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
    <App />
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

React Fragment
=================
Fragment is used to group of list of childrens without adding 
extra nodes of the DOM.

In general, We can return only one element at a time but we can't return more then one element directly.

To return more then one element we need to use React Fragment.

syntax
---------
<React.Fragment>
	-
	-
</React.Fragment

or

<>
	-
	-
</>


Examples
----------
App.js
-----
function App
{
    return (
        //return react element
        return  <h1>IHUB Talent</h1>
                <h2>React Tutorial For Freshers</h2>
    );
}
//export React component
export default App


o/p: Filed to compile



To overcome above problem we can use <div> tag and inside that
<div> tag we can declare any child tags.

ex:
App.js
-----
function App
{
    return (
        //return react element
        return  
		<div>
			<h1>IHUB Talent</h1>
                	<h2>React Tutorial For Freshers</h2>
		</div>
    );
}
//export React component
export default App


Note:
----
	In above program "<div>" tag is a unused tag.
	To remove unused/unnecessary tags we can use React Fragment.


approach1
------------

App.js
-------
import React from "react";

function App()
{
    return (
            <React.Fragment>
            <h1>IHUB React Tutorial</h1>
            <h1>React Classes for Freshers</h1>
            </React.Fragment>
    );

}
export default App;


approach2
----------

App.js
-----
import React from "react";
import {Fragment} from 'react';
function App()
{
    return (
            <Fragment>
            <h1>IHUB React Tutorial</h1>
            <h1>React Classes for Freshers</h1>
            </Fragment>
    );

}
export default App;



approach3
----------

App.js
--------
import React from "react";

function App()
{
    return (
            <>
            <h1>IHUB React Tutorial</h1>
            <h1>React Classes for Freshers</h1>
            </>
    );

}
export default App;
















