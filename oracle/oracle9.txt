JOINS
======

select * from emp; // 6 records 

select * from dept; // 4 records 

select * from emp,dept; // 6*4 =24 records 

select eid,ename,esal,dname,dloc from emp,dept; // 6 * 4 = 24 records 

select eid,ename,esal,deptno,dname,dloc from emp,dept; //column ambiguously defined

To avoid above problem we will use tablename.column name.
ex:
	select emp.eid,emp.ename,emp.esal,dept.deptno,dept.dname,dept.dloc
	from emp , dept; // 6 * 4 = 24 records 

Table alias
------------
A userdefined name given to a table is called table alias.

Table alias is temperory. Once the query is executed we will loss the table alias.

Using table alias ,length of the query will reduce and meanwhile performance is maintained.

ex:
	select e.eid,e.ename,e.esal,d.deptno,d.dname,d.dloc 
	from emp e, dept d; // 6 * 4 = 24 records 

Definition Joins
----------------
Joins are used to retrieve the data from one or more then one table.

We have following list of joins.

1) Equi-Join 

2) Non-Equi Join

3) Self Join 

4) Cartisian Product 

5) Inner Join 

6) Outer Join 

and etc.

1) Equi-Join 
--------------
When two tables are joined based on common column is called equi-join.

ex:
	select e.eid,e.ename,e.esal,d.dname,d.dloc 
	from emp e,dept d
	where(e.deptno=d.deptno); // 6 records 
	
2) Non-Equi Join
---------------
When tables are joined without equi join condition then it is called non-equi join.
ex:
	select e.eid,e.ename,e.esal,d.dname,d.dloc 
	from emp e,dept d
	where esal>=30000; // 2 * 4 = 8 records 
	
3) Self Join 
-------------
A table which joined to itself is called self join.

In self join we will create two table alias for same table.

ex:
	select e1.eid,e1.ename,e1.esal,e2.job,e2.comm 
	from emp e1,emp e2
	where(e1.deptno=e2.deptno); // 6 + 6 = 12 records 


4) Cartisian Product 
-------------------
It will give you all possible combinations.
ex:
	select e.eid,e.ename,e.esal,d.dname,d.dloc from emp e,dept d;//24 records


5) Inner Join 
--------------
It is similar to equi-join.

It is given by ANSI people.

ANSI stands for American National Standards Institute.

ex:
	select e.eid,e.ename,e.esal,d.dname,d.dloc 
	from emp e INNER JOIN dept d
	ON(e.deptno=d.deptno); // 6 records 

ex:
	select e.eid,e.ename,e.esal,d.dname,d.dloc 
	from emp e JOIN dept d
	ON(e.deptno=d.deptno); 

6) Outer Join 
---------------
It is a extension of equi-join.

It will return matching as well as not matching records.

A '+' symbol denoted as outer join operator.

We have three types of outer joins.

i)Left outer join

ii)Right outer join 

iii)Full outer join


i)Left outer join
-------------------
ex:
	SQL
	----
		select e.eid,e.ename,e.esal,e.deptno,d.deptno,d.dname,d.dloc 
		from emp e,dept d
		where(e.deptno=d.deptno(+));
	ANSI
	----
		select e.eid,e.ename,e.esal,e.deptno,d.deptno,d.dname,d.dloc 
		from emp e LEFT OUTER JOIN dept d
		ON(e.deptno=d.deptno);


ii)Right outer join 
------------------
ex:
	SQL
	----
		select e.eid,e.ename,e.esal,e.deptno,d.deptno,d.dname,d.dloc 
		from emp e,dept d
		where(e.deptno(+)=d.deptno);
	ANSI
	----
		select e.eid,e.ename,e.esal,e.deptno,d.deptno,d.dname,d.dloc 
		from emp e RIGHT OUTER JOIN dept d
		ON(e.deptno=d.deptno);

iii) Full OUTER join
--------------------
	ANSI
	----
		select e.eid,e.ename,e.esal,e.deptno,d.deptno,d.dname,d.dloc 
		from emp e FULL OUTER JOIN dept d
		ON(e.deptno=d.deptno);	

Views
======
View is a logical representation or virtual representation of a data from one or more then one table.

A table which is used to create a view is called base table or above table.

view does not consumes the memory.

view will get the data when we write select command.

syntax:
-------
	create view <view_name> as select stmt;

We have following list of views.

1) Simple view 

2) Complex view 

3) with read only view 

4) with check option view 

5) materized view 

1) Simple view 
---------------
If a view is created by using one base table is called simple view.
ex:
	create view v1 as select * from emp;
	create view v1 as select * from emp where deptno=10;
	create view v1 as select * from emp where comm is null;
	create view v1 as select * from emp where eid IN(201,202,203);
	create view v1 as select * from emp where esal between 10000 and 40000;
	create view v1 as select * from emp where ename like 'A%';

Note:
----
	In simple view DML operations are allowed.
	ex:
		select * from v1;

		delete from v1; // 7 records added 
		
		select * from emp; // no rows selected 

2) Complex view 
--------------
If a view is created by using more then one table is called complex view.
ex:
	create view v2 as select e.eid,e.ename,e.esal,d.dname,d.dloc 
	from emp e,dept d 
	where(e.deptno=d.deptno);

Note:
-----
	In complex view DML operations are not allowed.
	ex:
		select * from v2;

		delete from v2; // can't delete from view 

3) with read only view 
-------------------
If a view is created by using one base table and DML operation are not required then we need to use with read only view.
ex:
	create view v3 as select * from emp with read only;
Note:
----
	DML operations are not allowed.
	ex:
		select * from v3;

		delete from v3;// can't delete from view 

4) with check option view 
--------------------------
If a view is created by using one base table and DML operations are allowed only when condition is satisfied then we need to use with check option view.
ex:
	create view v4 as select * from emp where deptno=30 with check option;

Note:
	DML operations are allowed only if condition is true.
	ex:
		
	insert into v4 values(208,'Jojo',15000,40,'Salesman',100);//view WITH CHECK

	insert into v4 values(208,'Jojo',15000,30,'Salesman',100); //record inserted
	
	select * from v4;
	select * from emp;

5) materialized view 
----------------
A materilized view is also known as snapshot.

To create a materlized view a table must have primary key or unique key.

ex:
	alter table emp ADD primary key(eid);

	create materialized view v5 as select * from emp;

	select * from v5; // 8 records 

	delete from emp where eid=208;
	commit;
	select * from emp; // 7 records 

	select * from v5; // 8 records

In order to get updated records we need to referesh the materized view.
ex:
	exec  DBMS_SNAPSHOT.REFRESH('V5'); 

	Here DBMS_SNAPSHOT is a package name.
	Here REFRESH is a procedure name.

	select * from v5; // 7 records 

Q)Write a query to see the list of views present in database?

	select view_name from user_views;

Q)Write a query to drop the view?

	drop view v1;
	drop view v2;
	drop view v3;
	drop view v4;
	drop materialized view v5;







 
		
















































 



















		
	




































































	