To see the output in PL/SQL we need to run below command.
ex:
	SQL> set  serveroutput  on 


Q)Write a PL/SQL program to display employee name,employee salary,deptartment number  from emp table based on employee id?

ex:
	DECLARE
	L_name  varchar2(10);
	L_sal   number(10,2);
	L_dept  number(3);
	L_id    number(3);
	BEGIN
	L_id:=&id;
	select ename,esal,deptno into L_name,L_sal,L_dept from emp where eid=L_id;
	DBMS_OUTPUT.PUT_LINE(L_name||' '||L_sal||' '||L_dept);
	END;
	/

Percentage(%) TYPE attribute
==============================
It is used to declare a local variable with respect to column type.

syntax:
------
	<variable_name>  <table_name><column_name>%TYPE;

ex:
	DECLARE
	L_name  emp.ename%TYPE;
	L_sal   emp.esal%TYPE;
	L_dept  emp.deptno%TYPE;
	L_id    emp.eid%TYPE;
	BEGIN
	L_id:=&id;
	select ename,esal,deptno into L_name,L_sal,L_dept from emp where eid=L_id;
	DBMS_OUTPUT.PUT_LINE(L_name||' '||L_sal||' '||L_dept);
	END;
	/

Q)Write a PL/SQL program to display employee name, employee salary, department number, job and commission based on employee id ?

	DECLARE 
	L_name emp.ename%TYPE;
	L_sal  emp.esal%TYPE;
	L_dept emp.deptno%TYPE;
	L_job  emp.job%TYPE;
	L_comm emp.comm%TYPE;
	L_id   emp.eid%TYPE;
	BEGIN
	L_id:=&id;
	select ename,esal,deptno,job,comm into L_name,L_sal,L_dept,L_job,L_comm
	 from emp where eid=L_id;
DBMS_OUTPUT.PUT_LINE(L_name||' '||L_sal||' '||L_dept||' '||L_job||' '||L_comm);
	END;
	/

Percentage(%) ROWTYPE attribute
===================================
It is used to declare a local variable which holds complete row of a table.

ROWTYPE variable can't display directly.

In order to get the values from rowtype variable we need to use variable_name.column_name.

syntax:
-------
	<variable_name>   <table_name>%ROWTYPE;

ex:
	DECLARE 
	A     emp%ROWTYPE;
	L_id   emp.eid%TYPE;
	BEGIN
	L_id:=&id;
	select * into A from emp where eid=L_id;
DBMS_OUTPUT.PUT_LINE(A.eid||' '||A.ename||' '||A.esal||' '||A.deptno||' '||A.job);
	END;
	/

Control Statements
===================

1) IF THEN
------------
It will evaluate the code only if our condition is true.

ex:
	DECLARE 
	A number:=5;
	BEGIN
	DBMS_OUTPUT.PUT_LINE('WELCOME');

	IF A>2 THEN
	DBMS_OUTPUT.PUT_LINE('Hello');
	END IF;

	DBMS_OUTPUT.PUT_LINE('ThankYou');
	END;
	/
	
ex:
--
	DECLARE 
	A number:=5;
	BEGIN
	DBMS_OUTPUT.PUT_LINE('WELCOME');

	IF A>20 THEN
	DBMS_OUTPUT.PUT_LINE('Hello');
	END IF;

	DBMS_OUTPUT.PUT_LINE('ThankYou');
	END;
	/

2) IF THEN ELSE
-----------------
It will evaluate the code either our condition is true or false.

ex:
---
	DECLARE 
	A number:=4;
	BEGIN

	IF A>0 THEN 
	DBMS_OUTPUT.PUT_LINE('It is a positive number');
	ELSE
	DBMS_OUTPUT.PUT_LINE('It is a negative number');
	END IF;

	END;
	/


ex:
---
	DECLARE 
	A number:=-4;
	BEGIN

	IF A>0 THEN 
	DBMS_OUTPUT.PUT_LINE('It is a positive number');
	ELSE
	DBMS_OUTPUT.PUT_LINE('It is a negative number');
	END IF;

	END;
	/

3) IF THEN ELSIF THEN ELSE 
--------------------------
It will evaluate the code based on multiple conditions.

ex:
--
	DECLARE 
	opt  number(3);
	BEGIN
	opt:=&opt;
	
	IF opt=100  THEN 
	DBMS_OUTPUT.PUT_LINE('It is police number');
	ELSIF opt=103 THEN 
	DBMS_OUTPUT.PUT_LINE('It is enquiry number');
	ELSIF opt=108 THEN
	DBMS_OUTPUT.PUT_LINE('It is emergency number');
	ELSE
	DBMS_OUTPUT.PUT_LINE('Invalid option');
	END IF; 

	END;
	/
	
LOOPS
======
We have three types of loops.

1) Simple loop 

2) While loop

3) For loop 

1) Simple loop 
--------------
It will evaluate the code untill our condition is true.

ex:
---	
	DECLARE 
	A number:=1;
	BEGIN
	DBMS_OUTPUT.PUT_LINE('HI');

	LOOP
	DBMS_OUTPUT.PUT_LINE('Hello');
	EXIT WHEN A=4;
	A:=A+1;
	END LOOP;

	DBMS_OUTPUT.PUT_LINE('BYE');
	END;
	/

Q)Write a PL/SQL program to display 10 natural numbers?


ex:
---	
	DECLARE 
	A number:=1;
	BEGIN

	LOOP
	DBMS_OUTPUT.PUT_LINE(A);
	EXIT WHEN A=10;
	A:=A+1;
	END LOOP;

	END;
	/


2) While loop
--------------
It will evaluate the code untill our condition is true.

ex:
	DECLARE 
	A number:=1;
	BEGIN
	DBMS_OUTPUT.PUT_LINE('HI');
	
	WHILE A<=4 LOOP
	DBMS_OUTPUT.PUT_LINE('Hello');
	A:=A+1;
	END LOOP;

	DBMS_OUTPUT.PUT_LINE('BYE');
	END;
	/

ex:
---
	DECLARE 
	A number:=1;
	N number:=5;
	BEGIN

	WHILE A<=10 LOOP
	DBMS_OUTPUT.PUT_LINE(N||' * '||A||' = '||N*A);
	A:=A+1;
	END LOOP;

	END;
	/

3) For loop 
---------------
It will evaluate the code untill our condition is true.

ex:
--
	DECLARE 
	A number;
	BEGIN
	DBMS_OUTPUT.PUT_LINE('Hi');
	
	FOR A IN 1 .. 4 LOOP
	DBMS_OUTPUT.PUT_LINE('Hello');
	END LOOP;
	
	DBMS_OUTPUT.PUT_LINE('Bye');
	END;
	/

Exceptions in PL/SQL
====================
Runtime errors are called exceptions.

We have two types of exceptions.

1) Predefined exceptions 

2) Userdefined exceptions 

1) Predefined exceptions 
-------------------------
Built-In exceptions are called predefined exceptions.

We have following list of predefined exceptions.

i) NO_DATA_FOUND 

ii) TOO_MANY_ROWS 

iii) ZERO_DIVIDE 

iv) VALUE_ERROR

v) DUP_VAL_ON_INDEX 

vi) OTHERS 

i) NO_DATA_FOUND 
------------------
This exception will raise when select statement does not return any value.

	DECLARE 
	L_name  emp.ename%TYPE;
	BEGIN
	select ename into L_name from emp where eid=201;
	DBMS_OUTPUT.PUT_LINE(L_name);
	EXCEPTION
	WHEN NO_DATA_FOUND THEN 
	DBMS_OUTPUT.PUT_LINE('Please check employee id');
	END;
	/
	
ii) TOO_MANY_ROWS 
-----------------
This exception will raise when select statement returns more then one row.

ex:
	DECLARE 
	L_name  emp.ename%TYPE;
	BEGIN
	select ename into L_name from emp where deptno=10;
	DBMS_OUTPUT.PUT_LINE(L_name);
	EXCEPTION
	WHEN TOO_MANY_ROWS THEN 
	DBMS_OUTPUT.PUT_LINE('more then one record');
	END;
	/

iii) ZERO_DIVIDE
----------------
This exception will raise when we divide any number with zero.

ex:

	DECLARE 
	A number;
	BEGIN
	A:=10/0;
	DBMS_OUTPUT.PUT_LINE(A);
	EXCEPTION
	WHEN ZERO_DIVIDE THEN 
	DBMS_OUTPUT.PUT_LINE('dont divide by zero');
	END;
	/

iv)VALUE_ERROR
--------------
This exception will raise when there is a mismatch with datatype or size.

ex:
	DECLARE 
	A number(3);
	BEGIN
	A:=12345;
	DBMS_OUTPUT.PUT_LINE(A);
	EXCEPTION
	WHEN VALUE_ERROR THEN 
	DBMS_OUTPUT.PUT_LINE('please check the size');
	END;
	/

ex:
---
	DECLARE 
	L_sal  emp.esal%TYPE;
	BEGIN
	select ename into L_sal from emp where eid=201;
	DBMS_OUTPUT.PUT_LINE(L_sal);
	EXCEPTION
	WHEN VALUE_ERROR THEN 
	DBMS_OUTPUT.PUT_LINE('Please check datatype');
	END;
	/
	
v)DUP_VAL_ON_INDEX
-------------------
This exception will raise when we are trying to insert duplicate values in primary key.

ex:
	alter table emp ADD primary key(eid);

	BEGIN
	insert into emp values(201,'Jacky',30000,60,'Salesman',200);
	DBMS_OUTPUT.PUT_LINE('Record Inserted');
	EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
	DBMS_OUTPUT.PUT_LINE('Duplicate records not allowed');
	END;
	/

vi) OTHERS
---------
It is a universal angular exception which handles all types of exceptions.

ex:
	DECLARE 
	L_name  emp.ename%TYPE;
	BEGIN
	select ename into L_name from emp where eid=209;
	DBMS_OUTPUT.PUT_LINE(L_name);
	EXCEPTION
	WHEN OTHERS THEN 
	DBMS_OUTPUT.PUT_LINE('Please check employee id');
	END;
	/


































































































	
	
	
	


 






















