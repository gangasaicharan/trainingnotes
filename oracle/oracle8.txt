Sequences
==========
Sequence is an object which is used to generate the numbers.

syntax:
	create sequence sequence_name start with value increment by value;
ex:
	create sequence sq1 start with 1 increment by 1;

	create sequence sq2 start with 10 increment by 10;

	create sequence s3 start with 201 increment by 1;

Sequence contains two pseudo's.

1) NEXTVAL 
---------
	It is used to generate next number from sequence.

	ex:
	create sequence sq1 start with 101 increment by 1;

	drop table student;
	create table student(sno number(3),sname varchar2(10),sadd varchar2(12));

	insert into student values(sq1.NEXTVAL,'raja','hyd');
	insert into student values(sq1.NEXTVAL,'ravi','delhi');
	insert into student values(sq1.NEXTVAL,'ramana','vizag');
	commit;
	select * from student;

2) CURRVAL 
---------
	It will return the last number generated by sequence.
	ex:
		select sq1.CURRVAL from dual;


Q)Write a query to see the list of sequences present in database?

	select sequence_name from user_sequences;

Q)Write a query to drop the sequence from database?
	
	drop sequence sq1;


Synonyms
=========
Alternate name given to a table is called synonym.

We can use synonym name instead of table name for all the commands.

Synonyms are used to reduce the length of the query.

syntax:
	create synonym <synonym_name> for <object_name>;
ex:
	create synonym stud for student;

	select * from student;
	select * from stud;
	delete from stud;
	select * from student; // no rows selected
	select * from stud; // no rows selected 

Q)Write a query to display list of synonyms present in database?
	
	select synonym_name from user_synonyms;

Q)Write a query to drop the synonym?

	drop synonym stud;


Indexes
=========
Index is an object which is used to improve the performance of select command.

Index in a database is same as index in a book.

We can create index only to those columns which are widely used in where clause.

Whenever we create index , we will get two columns one is rowid and second one is 
indexed column. All the records will store in ascending order in indexed column.

ex:
		Indexed table 
	-------------------------------
	ROWID	|	INDEXED column
	-------------------------------
		|	9000
		|	19000
		|	23000
		|	29000
		|	36000
		|	49000
	--------------------------------

We have two types of indexes.

1) Simple index 
----------------
If index is created only for one column is called simple index.
ex:
	create index idx1 ON emp(esal);   

	select * from emp where esal=23000;

	Here index will be used when we use esal in where clause.

2) Complex index
-----------------
If index is created for more then one column is called complex index.
ex:
	create index  idx2 ON emp(eid,deptno);

	select * from emp where eid=201 and deptno=10;

	Here index will be used when we use eid and deptno in where clause.


Q)Write a query to display list of indexes present in database?

	select index_name from user_indexes;


Q)Write a query to drop the indexes from database?

	drop index idx1;
	drop index idx2;

Note:
----
	By default every index is a non-unique index.

	If we want unique index then we need to use below command.
	ex:
		create unique index idx3 ON emp(eid);

Interview Queries
------------------

Q) Write a query to see the list of users present in database?

	select username from all_users;


Q) Write a query to drop the user from database?

	drop user bharath cascade;
	drop user bhavana cascade;


Merge Command
==============
Merge command is a combination of insert and update command.

student10 table
----------------
drop table student10;
create table student10(sno number(3),sname varchar2(10),sadd varchar2(12));
insert into student10 values(101,'raja','hyd');
insert into student10 values(102,'ravi','delhi');
insert into student10 values(103,'ramana','vizag');
commit;


student20 table
---------------
drop table student20;
create table student20(sno number(3),sname varchar2(10),sadd varchar2(12));
insert into student20 values(103,'Alan','Texas');
insert into student20 values(104,'Jose','Florida');
commit;

ex:
	merge into student10 
	using student20
	ON(student10.sno=student20.sno)
	when matched 
	then update set sname=student20.sname,sadd=student20.sadd
	when not matched
	then insert(sno,sname,sadd) values(student20.sno,student20.sname,student20.sadd);

ex:
	ex:
	merge into student10 s1
	using student20 s2
	ON(s1.sno=s2.sno)
	when matched 
	then update set sname=s2.sname,sadd=s2.sadd
	when not matched
	then insert(sno,sname,sadd) values(s2.sno,s2.sname,s2.sadd);
































































































	