3) Assignment operators 
------------------------
We have following list of assignment operators.

ex:
	operator		description
	----------		----------
	+=			addition and equals to 
	-=			subtraction and equals to 
	*=			multiplication and equals to 
	/=			division and equals to 
	%=			modules and equals to 
	==			equals to 			
	!=			not equals to 
	
ex:
----
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>
			var i=10;

			i+=2;

			document.writeln(i); // 12
			

	</script>	
</body>
</html>


ex:
---
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>
			var i=10;

			i%=2;

			document.writeln(i); // 0
			

	</script>	
</body>
</html>

ex:
---

<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>
			var i=10;

			i%=20;

			document.writeln(i); // 10
			

	</script>	
</body>
</html>

ex:
----
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>
			var i=10;

			i/=20;

			document.writeln(i); // 0.5
			

	</script>	
</body>
</html>

ex:
---
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>
			var i=10;

			i*=20;

			document.writeln(i); // 200
			

	</script>	
</body>
</html>

ex:
---
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			document.writeln((10 == 10) +"<br>"); // true 
			
			document.writeln((10 == 20) +"<br>"); // false

			document.writeln((10 != 20) +"<br>" ); // true 

			document.writeln((10 != 10) +"<br>" ); // false  	
	</script>	
</body>
</html>

4) Logical operators
=====================
We have following list of logical operators.
ex:
	operator	description
	-----------	----------
	&&		logical AND
	||		logical OR
	!		logical NOT 

Logical AND operator (&&)
--------------------------
Truth table
-----------
T	T	= T
T	F	= F
F	T	= F 
F	F	= F 

ex:
---

<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			document.writeln(((5>2) && (6<10)) +"<br>"); // true 	

			document.writeln(((5>20) && (6<1)) +"<br>"); // false 

			document.writeln(((5>20) && (6<10)) +"<br>"); // false 
	</script>	
</body>
</html>

Logical OR operator (||)
--------------------------
Truth table
----------
T	T	= T
T	F	= T 
F	T	= T
F	F	= F 

ex:
---
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			document.writeln(((5>2) || (6<10)) +"<br>"); // true 	

			document.writeln(((5>20) || (6<1)) +"<br>"); // false 

			document.writeln(((5>20) ||  (6<10)) +"<br>"); // true 
	</script>	
</body>
</html>

Logical NOT operator (!)
-------------------------
ex:
--
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			document.writeln((!(5>2)) +"<br>"); // false 	

			document.writeln((!(5>20)) +"<br>"); // true 

	</script>	
</body>
</html>

5) Bitwise Operators
======================
We have following list of bitwise operators.

ex:
	operator	description
	---------	-----------
	&		Bitwise AND
	|		Bitwise OR 
	^		Bitwise XOR 
	~		Bitwise NOT 
	>>		Right shift
	<<		left shift 

Bitwise AND (&)
----------------
Bitwise AND operator deals with binary numbers.

ex:
---
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			var a=10, b=5;

			var c = a & b;

			document.writeln(c); //0

			/*
				10 - 1010
				5  - 0101
				-----------
				&  - 0000	
			*/

	</script>	
</body>
</html>

Bitwise OR 
-----------
Bitwise OR operator deals with binary numbers.

ex:

<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			var a=10, b=5;

			var c = a | b;

			document.writeln(c); //15

			/*
				10 - 1010
				5  - 0101
				-----------
				|  - 1111	
			*/

	</script>	
</body>
</html>


Bitwise XOR operator (^)
------------------------
Bitwise XOR operator deals with binary numbers.

ex:
--
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			var a=10, b=15;

			var c = a ^ b;

			document.writeln(c); //5

			/*
				10 - 1010
				15 - 1111
				-----------
				^  - 0101
			*/

	</script>	
</body>
</html>

Bitwise NOT operator (~)
-----------------------
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			var a=~10;

			document.writeln(a); //-11

	</script>	
</body>
</html>

eX:
---
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			var a=~50;

			document.writeln(a); //-51

	</script>	
</body>
</html>

ex:
---
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			var a=~(-10);

			document.writeln(a); //9

	</script>	
</body>
</html>


ex:
---
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			var a= 10 >> 2;  //10 / 4

			document.writeln(a); //2

	</script>	
</body>
</html>

ex:
---
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			var a= 100 >> 4;  // 100 / 16

			document.writeln(a); //6

	</script>	
</body>
</html>

ex:
---
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			var a= 100 << 3;  // 100 * 8

			document.writeln(a); //800

	</script>	
</body>
</html>

ex:
---
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			var a= 10 << 6  // 10 * 64

			document.writeln(a); //640

	</script>	
</body>
</html>

6) Special operators
====================
We have three types of special operators.

ex:
	operator	description	
	-------		-------------
	?:		It is used to make a conditions

	new 		It is used to create a instance.

	typeof		It will return type of a instance.

ex:
---
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			(5>2)?document.writeln("Hi"):document.writeln("Bye");

	</script>	
</body>
</html>	

ex:
---
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			(5>20)?document.writeln("Hi"):document.writeln("Bye");//Bye

	</script>	
</body>
</html>

ex:
---
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			((5>20) && (6<10))?document.writeln("Hi"):document.writeln("Bye"); //Bye

	</script>	
</body>
</html>

ex:
---
<!DOCTYPE html>
<html>
<head>
	<title>MyPage!</title>
</head>
<body>
	<script>

			var i=10;
			document.writeln(typeof(i)+"<br>"); //number 

			var j=true;
			document.writeln(typeof(j)+"<br>"); //boolean

			var k="hi";
			document.writeln(typeof(k)+"<br>"); //String 

			var l=null;
			document.writeln(typeof(l)+"<br>"); //object

			var m;
			document.writeln(typeof(m)+"<br>"); //undefined 


	</script>	
</body>
</html>


Q) Difference between null and undefined?


In JavaScript, undefined is a type, whereas null is an object.

undefined
------------

It means a variable declared, but no value has been assigned a value.
Ex:
	<script>
		var x;
		document.writeln(x); //undefined
	</script>

null
-----
A null in JavaScript is an assignment value.
Ex:
	<script>
		var x=null;
		document.writeln(x); //null
	</script>


Q) Types of functions in JavaScript?

We have three types of functions.


Named Functions
----------------
These types of functions contain name at the time of declaration.
Ex:
	function f1()
	{
	document.writeln(“hello world”);
	}
	f1();

2)Anonymous Functions
---------------------
These types of functions do not have any name.
They are declared dynamically at runtime.
Ex:
	var f1=function()
	{
	document.writeln('hello world');
	}
	f1();

3) Arrow functions
--------------------
Arrow functions are more secure when compare to other functions.

As per ES6 standards we need to use arrow function.

ex:
	var f1=()=>
		{
			document.writeln("Hello World");
		}































