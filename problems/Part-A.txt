Part - A

1) sum of digits of a given number?

class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the number :");
		int n=sc.nextInt(); 

		int rem,sum=0;
		while(n>0)
		{
			rem=n%10;
			sum=sum+rem;
			n=n/10;
		}
		System.out.println(sum);
	}
}


2) Java program to perform basic string compression using the counts of repeated characters?
	
input:
	aabcccccaaa

output:
	a2b1c5a3

ex:
public class Test {
    public static void main(String[] args) {
        String input = "aabcccccaaa";
        String compressed = compressString(input);
        System.out.println("Input: " + input);
        System.out.println("Output: " + compressed);
    }

    private static String compressString(String input) {
        if (input == null || input.isEmpty()) {
            return input;
        }

        StringBuilder compressedStringBuilder = new StringBuilder();
        char currentChar = input.charAt(0);
        int count = 1;

        for (int i = 1; i < input.length(); i++) {
            if (input.charAt(i) == currentChar) {
                // Increment count if the current character is repeated
                count++;
            } else {
                // Append current character and count to the result
                compressedStringBuilder.append(currentChar);
                compressedStringBuilder.append(count);

                // Update current character and reset count
                currentChar = input.charAt(i);
                count = 1;
            }
        }

        // Append the last character and count
        compressedStringBuilder.append(currentChar);
        compressedStringBuilder.append(count);

        // Convert StringBuilder to String
        String compressedString = compressedStringBuilder.toString();

        // Return the original string if compressed string is not shorter
        return compressedString.length() < input.length() ? compressedString : input;
    }
}


3) Given array of +ve or -ve integers find a pair whose sum is close to zero.

input:
	1,2,4,3,-6,-3,-9  
output:
	3,-3

import java.util.Arrays;

public class Test
	{
    public static void main(String[] args) {
        int[] inputArray = {1, 2, 4, 3, -6, -3, -9};
        findClosestSumPair(inputArray);
    }

    private static void findClosestSumPair(int[] nums) {
        if (nums == null || nums.length < 2) {
            System.out.println("Input array should have at least two elements.");
            return;
        }

        Arrays.sort(nums);

        int left = 0;
        int right = nums.length - 1;
        int closestSum = Integer.MAX_VALUE;
        int pair1 = 0, pair2 = 0;

        while (left < right) {
            int currentSum = nums[left] + nums[right];
            int currentDiff = Math.abs(currentSum);

            if (currentDiff < closestSum) {
                closestSum = currentDiff;
                pair1 = nums[left];
                pair2 = nums[right];
            }

            if (currentSum < 0) {
                left++;
            } else {
                right--;
            }
        }

        System.out.println("Input: " + Arrays.toString(nums));
        System.out.println("Output: " + pair1 + ", " + pair2);
    }
}














