Method overloading
===================
Having same method name with different parameters in a single class is called method overloading.

Methods which are present in a class are called overloaded methods.

Method overloading will reduce complexity of the programming.

ex:
----
class MeeSeva 
{
	//overloaded methods 
	public void search(int voterId)
	{
		System.out.println("int-arg method");
	}
	public void search(String houseNo)
	{
		System.out.println("String-arg method");
	}
	public void search(long aadharNo)
	{
		System.out.println("long-arg method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		MeeSeva ms=new MeeSeva();
		ms.search(101);
		ms.search("1-4-5/6/1");
		ms.search(200002l);
	}
}

Q)Can we overload main method in java?

Yes, we can overload main method in java.But JVM always execute main method with String[] parameter only.

ex:
class Test
{
	public static void main(String[] args)
	{
			System.out.println("String arg method");
	}
	public static void main(int[] iargs)
	{
			System.out.println("int arg method");
	}
}

Method overriding 
================
Having same method name with same parameters in a two different classes is called method overriding.

Methods which are present in parent class are called overridden methods.

Methods which are present in a child class are called overriding methods.

ex:
----
class Parent 
{
	public void property()
	{
		System.out.println("Cash+Gold+Land");
	}
	//overridden methods 
	public void marry()
	{
		System.out.println("Subhalakshmi");
	}
}
class Child extends Parent 
{
	//overriding methods 
	public void marry()
	{
		System.out.println("Trisha");
	}
}
class Test
{
	public static void main(String[] args)
	{
		Parent p=new Parent();
		p.property();//Cash+Gold+Land
		p.marry(); // Subhalakshmi

		Child c=new Child();
		c.property();// Cash+Gold+Land
		c.marry(); // Trisha

		Parent p1=new Child();
		p1.property();//Cash+Gold+Land
		p1.marry();//Trisha 
	}
}

If we declare any method as final then overriding of that method is not possible.

ex:

class Parent 
{
	public void property()
	{
		System.out.println("Cash+Gold+Land");
	}
	//overridden methods 
	public final void marry()
	{
		System.out.println("Subhalakshmi");
	}
}
class Child extends Parent 
{
	//overriding methods 
	public void marry()
	{
		System.out.println("Trisha");
	}
}
class Test
{
	public static void main(String[] args)
	{
		Parent p=new Parent();
		p.property();//Cash+Gold+Land
		p.marry(); // Subhalakshmi

		Child c=new Child();
		c.property();// Cash+Gold+Land
		c.marry(); // Trisha

		Parent p1=new Child();
		p1.property();//Cash+Gold+Land
		p1.marry();//Trisha 
	}
}
o/p:
	C.T.E 

Method Hiding
=============
Method hiding is exactly same as method overriding with following differences.

Method overriding			Method hiding
-----------------			---------------
Methods present in method overriding 	Methods present in method hiding
must be non-static.			must be static.

Method resolution will taken care 	Method resolution will taken care 
by JVM based on runtime object.		by compiler based on reference type.

It is also known as dynamic 		It is also known as static 
polymorphism, runtime polymorphism or 	polymorphism, compile time
late binding.				polymorphism, early binding.

ex:

class Parent 
{
	public static void property()
	{
		System.out.println("Cash+Gold+Land");
	}
	//overridden methods 
	public static void marry()
	{
		System.out.println("Subhalakshmi");
	}
}
class Child extends Parent 
{
	//overriding methods 
	public static void marry()
	{
		System.out.println("Trisha");
	}
}
class Test
{
	public static void main(String[] args)
	{
		Parent p=new Parent();
		p.property();//Cash+Gold+Land
		p.marry(); // Subhalakshmi

		Child c=new Child();
		c.property();// Cash+Gold+Land
		c.marry(); // Trisha

		Parent p1=new Child();
		p1.property();//Cash+Gold+Land
		p1.marry();//Subhalakshmi
	}
}


Q)Can we override static methods in java?

No, we can't override static methods in java.

Polymorphism
=============
Polymorphism has taken from Greek word.

Here poly means many and morphism means forms.

The ability to represent in different forms is called polymorphism.

The main objective of polymorhism is to provide flexibility.

Diagram: java24.1

In java, polymorphism is divided into two types.

1) Compile time polymorphism / Static polymorphism / Early Binding

2) Runtime polymorphism  / Dynamic polymorphism / late Binding 

1) Compile time polymorphism
-----------------------------
A polymorphism which exhibits at compile time is called compile time polymorphism.
ex:
	Method overloading
	Method Hiding 

2) Runtime polymorphism 
------------------------
A polymorphism which exhibits at runtime is called runtime time polymorphism.
ex:
	Method overriding 


Diagram: java24.2


Constructor
=============
Constructor is a special method which is used to initialized an object.
ex:
	Test t=new Test();

Having same name as class name is called constructor.

Constructor does not allow any returntype.

A constructor will accept following modifiers.
ex:
	default 
	public
	private
	protected

In java constructors are divided into two types.

1)Default constructor

2)Userdefined constructor 

1)Default constructor
-----------------------
It is a compiler generated constructor for every java program where we are not defining atleast zero argument constructor.

To see the default constructor we need to use below command.
ex:
	javac   Test.java

	javap   -c  Test 

Diagram: java24.3






































































































