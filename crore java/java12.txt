Typecasting 
============
The process of converting from one datatype to another datatype is called typecasting.

In java , typescasting can be perform in two ways.

1)Implicit typecasting

2)Explicit typecasting 

1)Implicit typecasting
---------------------
If we want to store small value into a bigger variable then we need to use implicit typecasting.

A compiler is responsible to perform implicit typecasting.

There is no possibility to loss the information.

It is also known as widening or upcasting.

We can perform implicit typcasting as follow.

ex:
	byte -->short
			-->
				int -->	long --> float  --> double
			-->
		char 

ex:1
-----
class Test  
{
	public static void main(String[] args) 
	{
		 byte b=10;

		 int i=b;

		 System.out.println(i); // 10
	}
}

ex:2
-----
class Test  
{
	public static void main(String[] args) 
	{
		char ch='a';

		long l=ch;

		System.out.println(l); // 97
	}
}

ex:3
-------
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		float f=i;

		System.out.println(f); // 10.0
	}
}

2)Explicit typecasting 
------------------------
If we want to store bigger value into a smaller variable then we need to use explicit typecasting.

A programmer is responsible to perform explicit typecasting.

There is a possibility to loss the information.

It is also known as Narrowing or Downcasting.

We can perform explicit typecasting as follow.

ex:
	byte <--short
			<--
				int <--	long <-- float  <-- double
			<--
		char 

ex:1
----
class Test  
{
	public static void main(String[] args) 
	{
		double d=10.56;

		int i=(int)d;

		System.out.println(i);//10
	}
}

ex:2
-----
class Test  
{
	public static void main(String[] args) 
	{
		int i=65;

		char ch=(char)i;

		System.out.println(ch);//A 
	}
}

ex:3
-----
class Test  
{
	public static void main(String[] args) 
	{
		int i=130;

		byte b=(byte)i;

		System.out.println(b);// -126
	}
}


Types of blocks
==================
A block is a set of statements which is enclosed in a curly braces i.e. {}.
ex:
	//block 
	{
		-
		- //set of statements
		-
	}

We have three types of blocks in java.

1)Instance block 

2)Static block 

3)Local block 

1)Instance block 
------------------
Instance block is used to initialize the instance variables.

Instance block will execute when create an object.

We can declare instance block as follow.

syntax:
	//instance block
	{
		-
		- //set of statements
		-
	}
ex:1
------
class Test  
{
	//instance block
	{
		System.out.println("instance-block");
	}

	public static void main(String[] args) 
	{
		System.out.println("main-method");
	}
}

o/p:
	main-method

ex:2
-----
class Test  
{
	//instance block
	{
		System.out.println("instance-block");
	}

	public static void main(String[] args) 
	{
		System.out.println("main-method");
		Test t=new Test();
	}
}
o/p:
	main-method
	instance-block

ex:3
----
class Test  
{
	//instance block
	{
		System.out.println("instance-block");
	}

	public static void main(String[] args) 
	{
		Test t1=new Test();
		System.out.println("main-method");
		Test t2=new Test();
	}
}
o/p:
	instance-block
	main-method
	instance-block

ex:4
----
class Test  
{
	//instance variable
	int i;

	//instance block
	{
		i=100;
	}

	public static void main(String[] args) 
	{
		Test t=new Test();
		System.out.println(t.i);//100
	}
}

2)static block
--------------
A static block is used to initialize the static variables.

A static block will execute at the time of class loading. 

We can declare static block as follow.

syntax:
	//static block
	static 
	{
		-
		- //set of statement
		-
	}

ex:1
----
class Test  
{
	//static block
	static
	{
		System.out.println("static-block");
	}

	public static void main(String[] args) 
	{
		System.out.println("main-method");
	}
}
o/p:
	static-block
	main-method

ex:2
-------
class Test  
{
	//instance block
	{
		System.out.println("instance-block");
	}
	//static block
	static
	{
		System.out.println("static-block");
	}

	public static void main(String[] args) 
	{
		System.out.println("main-method");
		Test t=new Test();
	}
}
o/p:
	static-block
	main-method
	instance-block

ex:3
------
class Test  
{
	//static variable
	static  int i;

	//static block
	static
	{
		i=200;
	}

	public static void main(String[] args) 
	{
		System.out.println(i); //200	
	}
}

3)Local block
-------------
A local block is used to initialize the local variables.

A local block will execute just like normal statement.

We can declare local block as follow.

syntax:
	//local block
	{
		-
		- //set of statement
		-
	}
	
ex:1
----
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		//local block
		{
			System.out.println("stmt2");
		}
		System.out.println("stmt3");
	}
}

o/p:
	stmt1
	stmt2
	stmt3

ex:2
------
class Test  
{
	public static void main(String[] args) 
	{
		//local variable
		int i;

		//local block
		{
			i=300;
		}

		System.out.println(i);//300
	}
}


Q)Can we execute java program without main method?

Yes, Till java 1.6 version it is possible to execute java program without main method by using static block.But from java 1.7 version onwards it is not possible to execute java program without main method.

ex:
			
class Test  
{
	//static block
	static
	{
		System.out.println("Hello World");
		System.exit(0);
	}
}

Operators
===========
Operator is a symbol which is used to perform some operations on operands.
ex:
	a + b 

	Here + is a operator.
	Here a and b are operands.

It can be arithmetic operation, logical operation ,bitwise operation, relational operation and etc.

We have following list of operators in java.

1)Assignment operators

2)Ternary or Conditional Operators

3)Logical Operators 

4)Bitwise OPErators

5)Arithmetic Operators

6)Relational Operators

7)Misc opreators 



1)Assignment operators
----------------------

ex:
----
class Test  
{
	public static void main(String[] args)
	{
		int i=10;

		i=20;

		i=30;

		System.out.println(i); //30
	}
}
Note:
	Reassingment of a variable is possible in java.

ex:
----
class Test  
{
	public static void main(String[] args)
	{
		final int i=10;

		i=20;

		i=30;

		System.out.println(i); //C.T.E 
	}
}
Note:
	cannot assign a value to final variable

ex:
----
class Test  
{
	//global variable
	static int i=100;

	public static void main(String[] args)
	{
		//local variable 
		int i=200;
		
		System.out.println(i); //200
	}
}
Note:
	Here priority goes to local variable

ex:
----
class Test  
{

	public static void main(String[] args)
	{
		int i = 10 % 2;
		System.out.println(i); //0

		int j = 10 % 20;
		System.out.println(j); //10
	}
}

ex:
----
class Test  
{

	public static void main(String[] args)
	{
		int i = 10 / 2;
		System.out.println(i); // 5

		int j = 10 / 20;
		System.out.println(j); // 0
	}
}

ex:
----
class Test  
{

	public static void main(String[] args)
	{
		int i=10;

		i+=5; //i = i + 5 

		System.out.println(i); // 15
	}
}

ex:
---
class Test  
{

	public static void main(String[] args)
	{
		int i=10;

		i%=3;

		System.out.println(i); // 1
	}
}

ex:
---
class Test  
{

	public static void main(String[] args)
	{
		int i=10;

		i*=2;

		System.out.println(i); //20
	}
}

2)Ternary or Conditional Operators
---------------------------------
syntax:
	(condition)?value1:value2;

ex:

class Test  
{
	public static void main(String[] args)
	{
		boolean b=(5>2)?true:false;		
		System.out.println(b); //true 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args)
	{
		int result=(5>20)?1:0;		
		System.out.println(result); //0
	}
}

Q)Write a java program to find out greatest of two numbers using ternary operator?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first number :");
		int a=sc.nextInt();// 5

		System.out.println("Enter the second number :");
		int b=sc.nextInt();// 10

		//logic
		int max=(a>b)?a:b;

		System.out.println(max+" is greatest");

	}
}


Q)Write a java program to find out greatest of three numbers using ternary operator?

ex:

import java.util.Scanner;
class Test  
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first number :");
		int a=sc.nextInt();// 5

		System.out.println("Enter the second number :");
		int b=sc.nextInt();// 10

		System.out.println("Enter the third number :");
		int c=sc.nextInt();// 15

		//logic
		int max=(a>b)?((a>c)?a:c):((b>c)?b:c);

		System.out.println(max+" is greatest");

	}
}






















































































































































































































































































































