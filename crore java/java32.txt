Exception Handling
==================

Q)What is the difference between Exception and Error?

Exception
==========
Exception is a problem for which we can provide solution programmatically.

Exception will raise due to syntax errors.

ex:
	FileNotFoundException 
	IllegalArgumentException
	ArithmeticException 

Error
====
Error is a problem for which we can't provide solution prorammatically.

Error will raise due to lack of system resources.

ex:
	OutOfMemoryError 
	LinkageError
	StackOverFlowError
	and etc.

As a part of java application development , it is a responsibility of a programmer to provide smooth termination for every java program.

We have two types of terminations.

1)Smooth termination / Graceful termination 
----------------------------------------
During the program execution suppose if we are not getting any interruption in the middle of the program such type of termination is called smooth termination.

2)Abnormal termination 
----------------------
During the program execution suppose if we are getting any interruption in the middle of the program such type of termination is called abnormal termination.
ex:
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10/0);
	}
}

Whenever exception raised in our program. we must and should handle that exception otherwise our program will terminate abnormally.

Exception will display name of the exception , description of the exception and line number of the exception.

Exception
==========
It is a unwanted , unexpected event which disturbs normal flow of our program.

Exception always raised at runtime so they are also known as runtime events.

The main objective of exception handling is to provide graceful termination.

In java exceptions are divided into two types.

1)Predefined exceptions 

2)Userdefined exceptions 

1)Predefined exceptions 
-----------------------
Built-In exceptions are called predefined exceptions.

It is divided into two types.

i)Checked exceptions 
--------------------
Exceptions which are checked by the compiler at the time of compilation is called checked exceptions.
ex:
	FileNotFoundException
	InterruptedException
	IOException 

	
ii)Unchecked exceptions 
------------------------
Exceptions which are checked by the JVM at the time of runtime is called
unchecked exceptions.
ex:
	ArithmeticException
	ClassCastException
	IllegalArgumentException 


Diagram: java32.1

If any checked exception raised in our program we must and should handle that exception by using try and catch block.

try block
===========
It is a block which contains risky code.

It always associate with catch block.

It is used to throw the exception to catch block.

If any exception raised in try block then try block won't be executed.


catch block
============
It is a block which contains error handling code.

It always associate with try block.

It is used to catch the exception which is thrown by try block.

A catch block will take exception class name as a parameter and that name must match with exception class name.

If there is no exception in try block then catch block won't be executed.


syntax:
-------
	try 
	{
		-
		- // risky code 
		-
	}
	catch(ArithmeticException ae)
	{
		-
		-
		-
	}


ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		catch(Exception e)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	try-block 

ex:2
-----
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(ArithmeticException ae)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	catch-block

ex:3
-----
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("stmt1");
			System.out.println(10/0);
			System.out.println("stmt2");
		}
		catch(ArithmeticException ae)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	stmt1
	catch-block

A try with multiple catch blocks
=================================
A try block can have multiple catch blocks.

If a try block contains multiple catch blocks then order of catch block is very important , it should be from child to parent but not from parent to child.

ex:

class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(ArithmeticException ae)
		{
			System.out.println("From ArithmeticException");
		}
		catch(RuntimeException re)
		{
			System.out.println("From RuntimeException");
		}
		catch(Exception e)
		{
			System.out.println("From Exception");
		}
	}
}

In catch block we can handle multiple exceptions also.

ex:

class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
catch(ArithmeticException | NullPointerException | ClassCastException e)
		{
			System.out.println("catch-block");
		}
	}
}


Various methods to display exception details
============================================
Throwable class defines following three methods to display exception details.

1)printStackTrace()
---------------------
It will display name of the exception , description of the exception and line number of the exception.

2)toString()
----------
It will display name of the exception and description of the exception.

3)getMessage()
-----------
It will display description of the exception.

ex:

class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(ArithmeticException ae)
		{
			ae.printStackTrace();

			System.out.println("====================");

			System.out.println(ae.toString());

			System.out.println("====================");

			System.out.println(ae.getMessage());
		}
	}
}


finally block
==============
It is never recommanded to maintain cleanup code in try block because if any exception raised in try block then try won't be executed.

It is never recommanded to maintain cleanup code in catch block because if no exception raised in try block then catch block won't be executed.

We need a place where we can maintain cleanup code and it should execute irrespective of exception raised or not is called finally block.

syntax:
-----
try
{
	-
	- //risky code 
	-
}
catch(Exception e)
{
	-
	- //error handling code 
	-
}
finally
{
	-
	- //cleanup code 
	-
}

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}
o/p:
	try-block
	finally-block

ex:2
------
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}
o/p:
	java.lang.ArithmeticException: / by zero
        	at Test.main(Test.java:7)
	
	finally-block


A try with finally block combination is valid in java.

ex:
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}
o/p:
	try-block
	finally-block


Q)What is the difference between final, finally and finalized method ?

final
------
final is a modifier which is applicable for variables, methods and classes.

If we declare any variable as final then reassignment of that variable is not possible.

If we declare any method as final then overriding of that method is not possible.

If we declare any class as final then creating a child class is not possible.

finally
-------
Finally is a block which contains cleanup code and it will execute irrespective of exception raised or not.

Finalized 
-----------
It is a method called by garbage collector just before destroying an object for cleanup activity.

throw statement
===============
Sometimes we will create exception object explicitly and handover to JVM manually by using throw statement.

ex:
	throw new ArithmeticException("Don't divide by zero");

ex:

class Test  
{
	public static void main(String[] args) 
	{
	throw new ArithmeticException("don't divided by zerooo");
	}
}


throws statement
=================
If any checked exception raised in our program so we must and should handle the exceptions by using try and catch block or by using throws statement.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			Thread.sleep(4000);
			System.out.println("Welcome to Java");		
		}
		catch (InterruptedException ie)
		{
			ie.printStackTrace();
		}
	}
}

ex:
----
class Test  
{
	public static void main(String[] args)throws InterruptedException 
	{
			Thread.sleep(4000);
			System.out.println("Welcome to Java");		
	}
}

2)Userdefined exceptions
===========================
Exceptions which are created by the user based on the application requirement are called customized exceptions.
ex:
	NoInterestInStudiesException
	NoPracticeInLabException
	NoGuranteeOfJobException 
	TooYoungException
	TooOldException 
ex:

import java.util.Scanner;

class TooYoungException extends RuntimeException
{
	TooYoungException(String s)
	{
		super(s);
	}
}
class TooOldException extends RuntimeException
{
	TooOldException(String s)
	{
		super(s);
	}
}
class Test
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the age :");
		int age=sc.nextInt();
		if(age<18)
			throw new TooYoungException("U r not eligible to vote");
		else
			throw new TooOldException("U r eligible to vote");
	}
}


























































































































































	











