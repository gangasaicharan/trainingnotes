Types of variables
==================
A name which is given to a memory location is called variable.

Purpose of variable is used to store the data.

We have two types of variables.

1)Primitive variables 
--------------------
It is used to represent primitive values.

2)Reference variables 
----------------------
It is used to represent object reference.
ex:
	Demo d=new Demo();
	     |
	   reference variable 

Based on the position and execution these variables are divided into three types.

1)Instance variables  / Non-static variables 

2)Static variables  / Global variables 

3)Local variables / Automatic variables / Temperory variables 

1)Instance variables
---------------------
A value of a variable which is varied(changes) from object  to object is called instance variable.

Instance variable will be created at the time of object creation and it will destroy at the time of object destruction.Hence scope of instance variable is same as scope of an object.

Intance variables will store in heap area.

Instance variable must and should declare immediately after class but not inside methods, blocks and constructors.

Instance variable can access directly from instance area but we can't access directly from static area.

To access instance variable from static area we need to create object reference.

ex:1
----
class Test
{
	//instance variable
	int  i = 10; 

	public static void main(String[] args)
	{
		System.out.println(i);//C.T.E 
	} 
}

ex:2
----
class Test
{
	//instance variable
	int  i = 10; 

	public static void main(String[] args)
	{
		Test t=new Test();
		System.out.println(t.i);//10 
	} 
}

Note:
------
If we won't initialize any value to instance variable thene JVM will initialized default values.

ex:3
------
class Test
{
	//instance variable
	boolean b;	

	public static void main(String[] args)
	{
		Test t=new Test();
		System.out.println(t.b);//false 	
	} 
}

ex:4
------
class Test
{
	public static void main(String[] args)
	{
		//calling 
	 	Test t=new Test();
		t.m1();
	} 
	
	//non-static method
	public void m1()
	{
		System.out.println("instance-method");	
	}
}

2)Static variables 
-------------------
A value of a variable which is not varied from object to object is called static variable.

Static variable will be created at the time of classloading and it will destroy at the time of class unloading.Hence scope of static variable is same as scope of a .class file. 

Static variable will store in method area.

Static variable must and should declare immediately after the class using static keyword but not inside methods, blocks and constructors.

Static variable can access directly from instance area as well as from static area.

Static variable we can access by using object reference and class name.


ex:1
-----
class Test
{
	//static variable
	static int i=10;	

	public static void main(String[] args)
	{
		System.out.println(i); //10

		Test t=new Test();
		System.out.println(t.i); //10

		System.out.println(Test.i);//10 		
	} 
}

Note:
-----
If we won't initialize any value to static variable then JVM will initialize default values.

ex:2
-----
class Test
{
	//static variable
	static String s;

	public static void main(String[] args)
	{
		System.out.println(s);//null		
	} 
}

ex:3
------
class Test
{
	public static void main(String[] args)
	{
		m1();
		
		Test t=new Test();
		t.m1();

		Test.m1();			
	}
	//static method
	public static void m1()
	{
		System.out.println("static-method");	
	} 
}

3)Local variables
=================
To meet temperory requirement sometimes we will declare our variables inside methods, blocks and constructors.Such type of variables are called local variables.

Local variable will be created at the time of execution block and it will destroy when execution block is executed.Hence scope of local variable is same as scope of a execution block where it is declared.

Local variable will store in java stack memory.
	
ex:1
----
class Test
{
	public static void main(String[] args)
	{
		//local variable
		int i=10;
		System.out.println(i); //10					
	}
	
}

Note:
------
If we won't initialize any value to local variable then JVM will not initialize any default values.

ex:2
----
class Test
{
	public static void main(String[] args)
	{
		//local variable
		int i;
		System.out.println(i); 				
	}
	
}
o/p:

C.T.E : variable i might not have been initialized

Interview Question
===================
Q)Write a java program to find out maximum and minimum range of byte datatype?

ex:
class Test
{
	public static void main(String[] args)
	{				
		System.out.println(Byte.MIN_VALUE); //-128 
		System.out.println(Byte.MAX_VALUE); // 127
	}
}

Q)Write a java program to find out maximum and minimum range of short datatype?

class Test
{
	public static void main(String[] args)
	{				
		System.out.println(Short.MIN_VALUE); // -32768
		System.out.println(Short.MAX_VALUE); //  32767
	}
}

Q)Is java, purely object oriented or not?

No, Java will not consider as purely object oriented programming language because it does not support many OOPS concepts like multiple inheritance, operator overloading and more over we depends upon primitive datatypes which are non-objects.

	
Fully Qualified name
=====================
Fully qualified name means we will declare a class or interface along with package name.
ex:
	java.lang.System(C) 	
	java.io.File(C)
	java.io.Serializable(I) 
	java.util.Comparator(I) 

It will improve the readability of our code. 

ex:
----
class Test
{
	public static void main(String[] args)
	{				
		java.util.Date d=new java.util.Date();
		System.out.println(d);
	}
}




























































































































