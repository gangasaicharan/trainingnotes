Enum
======
Enum is a group of named constants.

Enum concept introduced in 1.5 version.

Using Enum we can create our own datatype called enumerated datatype.

When compare to old language enum ,java enum is more powerful.

syntax:
-------
	enum type_name
	{
		val1,val2,....,valN
	}

ex:
----
	enum  Month
	{
		JAN,FEB,MAR
	}

Internal implementation of enum
================================
Every enum internally consider as class concept and it extends with java.lang.Enum class.

Every enum constant is a reference variable of enum type.

ex:

enum Month		final class Month extends java.lang.Enum	
{			{
	JAN,FEB,MAR ==>		public static final Month JAN=new Month();
}				public static final Month FEB=new Month();
				public static final Month MAR=new Month();
			}

Declaration and Usage of Enum
===============================
enum  Month
{
	JAN,FEB,MAR
}
class Test
{
	public static void main(String[] args)
	{
		Month m=Month.JAN;
		System.out.println(m);
	}
}

ex:
----
enum  Month
{
	JAN,FEB,MAR
}
class Test
{
	public static void main(String[] args)
	{
		Month m=Month.JAN;
		switch(m)
		{
			case JAN: System.out.println("January"); break;
			case FEB: System.out.println("February"); break;
			case MAR: System.out.println("March"); break;
		}
	}
}

java.lang.Enum class
====================
The power to enum will be inherited from java.lang.Enum class.

This class contains following two methods.

1)values()
----------
	It is a static method which returns all the constants of enum.

2)ordinal() 
------------
	It is used to return ordinal number.

ex:
----
enum  Week
{
	MON,TUE,WED,THU,FRI,SAT
}
class Test
{
	public static void main(String[] args)
	{
		Week[] w=Week.values();

		//for each loop
		for(Week w1:w)
		{
			System.out.println(w1+" ---------- "+w1.ordinal());
		}
	}
}


When compare to old language enum , java enum is more powerful because in addition to constants we can declare variables, methods and contructors.

ex:
---
enum  Cloth
{
	SILK,COTTON,KHADI;

	Cloth()
	{
		System.out.println("constructor");
	}
}
class Test
{
	public static void main(String[] args)
	{
		Cloth c=Cloth.COTTON;	
	}
}

ex:
---
enum  Cloth
{
	SILK,COTTON,KHADI;

	static int i=100;

	public static void main(String[] args)
	{
		System.out.println(i);//100
	}
}

Wrapper classes
================
The main objective of wrapper classes are.

1)To wrap primitive to wrapper object and vice versa.

2)To defined several utility methods. 

primitive type			Wrapper type
--------------			-------------
byte				Byte
short				Short
int				Integer
long				Long
float				Float
double				Double
boolean				Boolean
char				Character 

constructor
------------
Every wrapper class contains two constructors.One will take corresponding primitive as an argument and another will take corresponding String as an argument.

wrapper class			constructor
----------------		-----------
Byte				byte or String 
Short				short or String 
Integer				int or String
Long				long or String
Float				float or String
Double				double or String
Boolean				boolean or String
Character 			char 

ex:1
-----
class Test
{
	public static void main(String[] args)
	{
		Integer i1=new Integer(10);
		System.out.println(i1);//10

		Integer i2=new Integer("20");
		System.out.println(i2);//20
	}
}

ex:2
-----
class Test
{
	public static void main(String[] args)
	{
		Boolean b1=new Boolean(true);
		System.out.println(b1);//true 

		Boolean b2=new Boolean("false");
		System.out.println(b2);//false 
	}
}
ex:3
-----
class Test
{
	public static void main(String[] args)
	{
		Character c=new Character('a');
		System.out.println(c);//a
	}
}

Utility methods
---------------

i)valueOf()
------------
It is same like constructor.
It is used to wrap primitive to wrapper object.
ex:
class Test
{
	public static void main(String[] args)
	{
		Integer i1=Integer.valueOf(10);
		System.out.println(i1);//10

		Integer i2=Integer.valueOf("20");
		System.out.println(i2);//20
	}
}
	


ii)xxxValue()
--------------
It will convert wrapper object to primitive type.
ex:
class Test
{
	public static void main(String[] args)
	{
		Integer i1=new Integer(10);

		byte b=i1.byteValue();
		System.out.println(b);//10

		short s=i1.shortValue();
		System.out.println(s);//10
	}
}

	

iii)parseXxx()
-------------
It is used to convert string to primitive type.
ex:

class Test
{
	public static void main(String[] args)
	{
		String str="65";

		int i=Integer.parseInt(str);
		System.out.println(i);//65

		float f=Float.parseFloat(str);
		System.out.println(f);//65.0

		double d=Double.parseDouble(str);
		System.out.println(d);//65.0
	}
}

iv)toString() 
--------------
It is used to convert wrapper object to string type.
ex:
class Test
{
	public static void main(String[] args)
	{
		Integer i1=new Integer(10);

		String s1=i1.toString();

		System.out.println(s1);//10

	}
}

Q)Write a java program to perform sum of two binary numbers?

input:
	1010
	0101
output:
	1111

ex:
---
import java.util.Scanner;
class Test
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the First binary number :");
		String binary1=sc.next();

		System.out.println("Enter the Second binary number :");
		String binary2=sc.next();

		//convert binary to decimal
		int a=Integer.parseInt(binary1,2);
		int b=Integer.parseInt(binary2,2);

		//logic
		int c=a+b;

		//convert decimal to binary 
		String result=Integer.toBinaryString(c);
		System.out.println("sum of two binary numbers is ="+result);
	}
}

Q) Types of objects in java?

We have two types of objects in java.

1)Immutable object 

2)Mutable object 

1)Immutable object 
-------------------
After object creation if we perform any changes then for every change a new object will be created such type of object is called immutable object.
ex:
	String and Wrapper class
 

2)Mutable object 
-----------------
After object creation if we perform any changes then all the changes will be done in a single object such type of object is called mutable object.
ex:
	StringBuffer and StringBuilder 


String
========
String is a set of characters which is enclosed in a double quotation.

case1:
------
Once if we create a String object we can't perform any changes.If we perform any changes then for every change a new object will be created such behaviour is called immutability of an object.

Diagram: java28.1


case2:
-----
Q)What is the difference between == and .equals() method?

==
----
It is equality/comparision operator which returns boolean values.

It is used for reference comparision or address comparision.

ex:

class Test
{
	public static void main(String[] args)
	{
		String s1=new String("bhaskar");

		String s2=new String("solution");

		System.out.println(s1==s2);//false 
	}
}

.equals()
-----------
It is a method present in String class which returns boolean values.

It is used for content comparision which is case sensitive.

ex:


class Test
{
	public static void main(String[] args)
	{
		String s1=new String("bhaskar");

		String s2=new String("bhaskar");

		System.out.println(s1.equals(s2));//true

	}
}

























 










































































