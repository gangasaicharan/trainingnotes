Working with LOB values
=======================
Files are called LOB's.

We have two types of LOB's.

1)BLOB (Binary Large Object)
	ex:
		images,audio,video,avi file and etc.

2)CLOB (Character Large Object)
	ex:
		text file ,advanced text file and etc.

While dealing with matrimonial applications, job portal applications, profile management applications and etc we need to insert and retrieve LOB values.

Using simple Statement object we can place LOB values directly to query parameter.To overcome this limitation we need to use PreparedStatement object.

To set the values to query parameters we will use 

ex:
	ps.setBinaryStream(-,-,-)/ps.setBLOB(-,-,-)
	ps.setCharacterStream(-,-,-)/ps.setCLOB(-,-,-)


emp2 table
-----------
drop table emp2;

create table emp2(eid number(3),ename varchar2(10),ephoto BLOB);


PhotoInsertApp.java
-------------------
package com.ihub.www;

import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PhotoInsertApp 
{
	public static void main(String[] args)throws Exception 
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the employee id :");
		int id=sc.nextInt();
		
		System.out.println("Enter the employee name :");
		String name=sc.next();
			
		//locate a file
		File f=new File("src/com/ihub/www/rock.png");
		FileInputStream fis=new FileInputStream(f);
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="insert into emp2 values(?,?,?)";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1,id);
		ps.setString(2,name);
		ps.setBinaryStream(3,fis,(int)f.length());
		
		//execute
		int result=ps.executeUpdate();
		if(result==0)
			System.out.println("No Record inserted");
		else
			System.out.println("Record inserted");
		
		ps.close();
		con.close();
		
	}
}

PhotoRetrieveApp.java
----------------------
package com.ihub.www;

import java.io.FileOutputStream;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class PhotoRetrieveApp 
{
	public static void main(String[] args)throws Exception 
	{

		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		String qry="select * from emp2";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			InputStream is=rs.getBinaryStream(3);
			
			FileOutputStream fos=new FileOutputStream("C:\\demo\\vasu.jpg");
			
			int byteReads=0;
			
			byte[] buff=new byte[255];
			
			while((byteReads=is.read(buff))!=-1)
			{
				fos.write(buff, 0, byteReads);
			}
			fos.close();
		}
		System.out.println("Please check the location");
		rs.close();
		st.close();
		con.close();
	}
}


JDBC Flexible Application
==========================
In JDBC , Connection object consider as heavy weight object.

It is not recommanded to create Connection object in every JDBC application.

It is always recommanded to create a seperate class which returns Connection object.

DBConnection.java
------------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;

public class DBConnection 
{
	static Connection con=null;
	
	public static Connection getConnection()
	{
		try
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return con;
	}
}


FlexibleApp.java
-----------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

public class FlexibleApp 
{
	public static void main(String[] args)throws Exception  
	{
		Connection con=DBConnection.getConnection();
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		st.close();
		con.close();
	}
}

Working with properties file
=============================
In regular intervals, our DBA will change username and password for security reason.

It is never recommanded to pass database properties directly the application.

It is always recommaned to read database properties from properties file.

A properties file contains key and value.

dbdetails.properties
---------------------
driver=oracle.jdbc.driver.OracleDriver
url=jdbc:oracle:thin:@localhost:1521:XE
username=system
password=admin 


ex:
----
package com.ihub.www;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

public class PropertiesFileApp 
{
	public static void main(String[] args)throws Exception  
	{
		//local the properties file
		FileInputStream fis=new FileInputStream("src/com/ihub/www/dbdetails.properties");
		
		//create Properties class
		Properties p=new Properties();
		
		//storing properties file data to properties class
		p.load(fis);
		
		//reading the data from properties class
		String s1=p.getProperty("driver");
		String s2=p.getProperty("url");
		String s3=p.getProperty("username");
		String s4=p.getProperty("password");
		
		Class.forName(s1);
		Connection con=DriverManager.getConnection(s2,s3,s4);
		
		Statement st=con.createStatement();
		
		String qry="select * from student";
		
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3) );
		}
		
		rs.close();
		st.close();
		con.close();
	}
}

Thin-Client/Fat-Server application
=====================================
Every JDBC application is a thin-client/fat-server application.

Diagram:jdbc6.1

To create a thin-client/fat-server application we need to save our business logic and persistence logic in the database software in the form of PL/SQL procedures and functions.

But To deal with PL/SQL procedures and functions we need to use CallableStatement object.

PL/SQL procedure
==================
create or replace procedure first_proc(A IN number,B IN number,C OUT number)
IS
BEGIN
C:=A+B;
END;
/

ex:
---
package com.ihub.www;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Types;

public class CallableStmtApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		CallableStatement cst=con.prepareCall("{CALL first_proc(?,?,?)}");
		
		//register out parameter
		cst.registerOutParameter(3, Types.INTEGER);
		
		//set in parameter
		cst.setInt(1, 30);
		cst.setInt(2, 20);
		
		//execute
		cst.execute();
		
		//gather the result
		int result=cst.getInt(3);
		System.out.println("sum of two numbers is ="+result);
		
		cst.close();
		con.close();
	}
}


































































































































