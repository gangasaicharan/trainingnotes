Q)Write a JDBC application to update student name based on student number?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PSUpdateApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the student name :");
		String name=sc.next();
		
		System.out.println("Enter the student no :");
		int no=sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="update student set sname=? where sno=?";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setString(1,name);
		ps.setInt(2,no);
		
		//execute
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record updated");
		else
			System.out.println("Record updated");
		
		ps.close();
		con.close();
	}
}

Q)Write a JDBC application to delete a student record based on student number?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PSDeleteApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the student no:");
		int no=sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="delete from student where sno=?";
		
		PreparedStatement ps=con.prepareStatement(qry);	
		
		//set the values
		ps.setInt(1,no);
		
		//execute
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record Deleted");
		else
			System.out.println("Record deleted");
		
		ps.close();
		con.close();
		
		
	}
}

Solution for SQL injection problem
====================================
While dealing with PreparedStatement object we won't get SQL injection problem.

ex:

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Scanner;

public class SolForSQLInjProbApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the username :");
		String name=sc.next();
		
		System.out.println("Enter the password :");
		String pass=sc.next();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="select count(*) from userlist where uname=? and pwd=?";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values 
		ps.setString(1,name);
		ps.setString(2,pass);
		
		ResultSet rs=ps.executeQuery();
		int cnt=0;
		while(rs.next())
		{
			cnt=rs.getInt(1);
		}
		if(cnt==0)
			System.out.println("Invalid Credentials");
		else
			System.out.println("Valid Credentials");
		
		rs.close();
		ps.close();
		con.close();
	}
}











Working with Date values
=========================
While dealing with DOB,DOA,DOR,DOD and etc. We need to insert or retrieve date values.

It is never recommanded to store date values in the form of String because
We can't compare two dates.

Every database software supports different data patterns.
ex:
	oracle -  dd-MMM-yy
	mysql  -  yyyy-MM-dd

A java.util.Date class object is not suitable to perform database operation.

A java.sql.Date class object is suitable to perform database operation.

Once JDBC driver will get the date value then it will insert in the pattern which is supported by underlying database software.


Standard procedure to insert Date values
----------------------------------------

Diagram: jdbc5.1

With respect to the diagram:

1) Enduser will give date value in the form of String.

2) A parse() method of java.text.SimpleDateFormat class converts string date 
   to java.util.Date class object.

3) Our application converts java.util.Date class object to java.sql.Date class
   object.

4) A ps.setDate(-,-) method is used to set the date value to query parameter.

5) Once JDBC driver will get date value then it will insert in the pattern 
   which is supported by underlying database software.


emp1 table
==========
drop table emp1;

create table emp1(eid number(3),ename varchar2(10),edoj date);


DateInsertApp.java
------------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.util.Scanner;

public class DateInsertApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the employee id :");
		int id=sc.nextInt();
		
		System.out.println("Enter the employee name :");
		String name=sc.next();
		
		System.out.println("Enter the employee doj (dd-MM-yyyy) : ");
		String sdoj=sc.next();
		
		//converting string date to util date object
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		java.util.Date udoj=sdf.parse(sdoj);
		
		//convert util date object to sql date object
		long ms=udoj.getTime();
		java.sql.Date sqldoj=new java.sql.Date(ms);
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="insert into emp1 values(?,?,?)";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1,id);
		ps.setString(2,name);
		ps.setDate(3,sqldoj);
		
		//execute
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record inserted");
		else
			System.out.println("Record inserted");
		
		ps.close();
		con.close();
	}
}

DateRetrieveApp.java
---------------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;

public class DateRetrieveApp 
{
	public static void main(String[] args)throws Exception 
	{

		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		String qry="select * from emp1";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			int id=rs.getInt(1);
			String name=rs.getString(2);
			java.sql.Date sqldoj=rs.getDate(3);
			
			//converting sql date to util date
			java.util.Date udoj=(java.util.Date)sqldoj;
			
			//converting util date to string date
			SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
			String sdoj=sdf.format(udoj);
			
			System.out.println(id+" "+name+" "+sdoj);
		}
		
		rs.close();
		st.close();
		con.close();
	}
}

DatabaseMetaData
==================
DatabaseMetaData is an interface which is present in java.sql package.

DatabaseMetaData provides metadata of a database.

DatabaseMetaData gives information about database like database product name,database product version, database driver name, database driver version,database username and etc.

We can create DatabaseMetaData object by using getMetaData() method of Connection object.
ex:
	DatabaseMetaData dbmd=con.getMetaData();

ex:
----
package com.ihub.www;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;

public class DBMDApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
	
		DatabaseMetaData dbmd=con.getMetaData();
		
		System.out.println(dbmd.getDatabaseProductName());
		System.out.println(dbmd.getDatabaseProductVersion());
		System.out.println(dbmd.getDriverName());
		System.out.println(dbmd.getDriverVersion());
		System.out.println(dbmd.getUserName());
		
		con.close();
	}
}


ResultSetMetaData
==================
ResultSetMetaData is an interface which is present in java.sql package.

ResultSetMetaData provides metadata of a table.

ResultSetMetaData gives information about number of columns present in database table, types of columns, size of columns and etc.

We can create ResultSetMetaData object by using getMetaData() method of ResultSet object.
ex:
	ResultSetMetaData rsmd=rs.getMetaData();

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;

public class RSMDApp 
{
	public static void main(String[] args)throws Exception 
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		
		ResultSetMetaData rsmd=rs.getMetaData();
		
		System.out.println(rsmd.getColumnCount());
		System.out.println(rsmd.getColumnName(1));
		System.out.println(rsmd.getColumnTypeName(2));
		System.out.println(rsmd.getColumnDisplaySize(2));
		
		rs.close();
		st.close();
		con.close();
		
	}
}


































































































































