Q)What is the difference between GET and POST methodology?

GET					POST
---------				--------
It is a default methodology.		It is a not a default methodology.

It sends the request fastly.		It sends the request bit slow.

It will carry limited amount of data.	It will carry unlimited amount of
					data.

It is not suitable for secure data.	It is suitable for secure data.

It shows the data in a query string.	It does not show the data in a query						string.

It is not suitable for encryption and 	It is suitable for encryption and 
fileuploading.				fileuploading.

To process GET methodology we will 	To process POST methodology we will
use doGet(-,-) method.			use doPost(-,-) method.


Form Validation 
=================
The process of checking format and pattern of form data is called form validation and such logic is called form validation logic.

Form validation can be done in two ways.

1)Client side form validation 
----------------------------
A validation which is performed at client side is called client side form validation.

2)Server side form validation 
-----------------------------
A validation which is performed at server side is called server side form validation.

Deployment Directory structure
-------------------------------
ValidationApp
|
|----Java Resources
|	|
	|------src
		|
		|---com.ihub.www
			|
			|--FormSrv.java
|----Web Content
|	|
	|------form.html
	|------validation.js 	
	|
	|------WEB-INF
		|
		|----web.xml

Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

form.html
---------
<html>
	<head>
		<title>MyPage!</title>	
		
		<!--  add javascript file -->
		<script type="text/javascript" src="validation.js"></script>
		
	</head>
	<body>
	
		<form name="myform" action="test" method="GET" onsubmit="return validate()">
			Name: <input type="text" name="t1"/> <br>
			Age:<input type="text" name="t2"/> <br>
			<input type="submit" value="submit"/>		
		</form>

	</body>
</html>

validation.js
-------------
function validate()
{
	
	var name=document.myform.t1.value;
	var age=document.myform.t2.value;
	
	if(name=="")
	{
		alert("Name is Mandatory");
		document.myform.t1.focus();
		return false;
	}
	if(age=="")
	{
		alert("Age is Mandatory");
		document.myform.t2.focus();
		return false;
	}
	else
	{
		if(isNaN(age))
		{
			alert("Age must be numeric");
			document.myform.t2.value="";
			document.myform.t2.focus();
			return false;
		}
	}

	
	return true;
}


web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>FormSrv</servlet-name>
  	<servlet-class>com.ihub.www.FormSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>FormSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

FormSrv.java
-----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class FormSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String name=req.getParameter("t1");
		String sage=req.getParameter("t2");
		int age=Integer.parseInt(sage);
		
		if(age<18)
			pw.println("<center><h1>U r not eligible to vote</h1></center>");
		else
			pw.println("<center><h1>U r eligible to vote</h1></center>");
		
		pw.close();
	}
}

Request url
----------
	http://localhost:2525/ValidationApp/

File Uploading
================
The process of capturing the file from client machine file system and storing a server machine file system is called file uploading and reverse is called file downloading.

While dealing with matrimonial application, job portal application or profile management application we need to upload or download a file.

There is no specific API in Servlet to perform file uploading.

We need to take the support of third party API called javazoom API.

Javazoom API comes with zip file and once if we extracted we will get three jar files.

1) uploadbean.jar (Main Jar file)

2) struts.jar     (Dependent jar file)

3) cos.jar  	  (Dependent jar file)


We can use file component as follow.
ex:
	<input type="file" name="f1"/>


JavaZoom API link:
------------------
https://drive.google.com/file/d/1LB0WSJvSCCVOgz7xNwyuYtmy_0_TfJzq/view?usp=share_link


Deployment Directory structure
-------------------------------
FileUploadApp
|
|----Java Resources
|	|
	|------src
		|
		|---com.ihub.www
			|
			|--UploadSrv.java
|----Web Content
|	|
	|------form.html
	|
	|------WEB-INF
		|
		|----web.xml
		|
		|------lib
			|
			|--uploadbean.jar
			|--struts.jar
			|--cos.jar

Note:
-----
In above application we need to add "servlet-api.jar" and "uploadbean.jar" file in project build path.

form.html
---------

<form action="test" method="POST" enctype="multipart/form-data">

	File1: <input type="file" name="f1"/> <br>
	
	File2: <input type="file" name="f2"/> <br>
	
	<input type="submit" value="upload"/>

</form>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>UploadSrv</servlet-name>
  	<servlet-class>com.ihub.www.UploadSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>UploadSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

UploadSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import javazoom.upload.MultipartFormDataRequest;
import javazoom.upload.UploadBean;

public class UploadSrv extends HttpServlet
{
	protected void doPost(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		try
		{
			UploadBean ub=new UploadBean();
			ub.setFolderstore("C:\\demo");
			ub.setOverwrite(false);
			
			MultipartFormDataRequest nreq=new MultipartFormDataRequest(req);
			ub.store(nreq);
			
			pw.println("<center><h1>Files are uploaded successfully!!</h1></center>");
		}
		catch(Exception e)
		{
			pw.print(e);
		}
		
		pw.close();
	}
}

Request url
---------
	http://localhost:2525/FileUploadApp/	



Working with NetBeans IDE
==========================

step1:
------
Download and install netbeans IDE.

ex:

https://drive.google.com/file/d/1L4gyT3sspfatj1LkXx9APt2KchNTrNyC/view?usp=sharing


step2:
-----
Launch Netbeans IDE by choosing workspace location.


step3:
-----
Create a "web application" in netbeans IDE.

step4:
------
Add "servlet-api.jar" file in libraries folder.

step5:
------
Create servlet program in source packages folder.

step6:
-----
Run the project.






















































































