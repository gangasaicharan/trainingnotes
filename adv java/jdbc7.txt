Types of ResultSet object
==========================
We have two types of ResultSet objects.

1)Non-Scrollable ResultSet object

2)Scrollable ResultSet object 

1)Non-Scrollable ResultSet object
--------------------------------
A ResultSet object which allows us to read the records sequentially, uni-directionally such type of ResultSet object is called non-scrollable ResultSet object.

Bydefault every ResultSet object is a non-scrollable ResultSet object.

If we create JDBC Statement object without type ,mode value then that ResultSet object is called Non-Scrollable ResultSet object.

ex:
	Statement st=con.createStatement();
	ResultSet rs=st.executeQuery("select * from student");


2)Scrollable ResultSet object
-------------------------------
A ResultSet object which allows us to read the records non-sequentially, bi-directionally, randomly such type of ResultSet object is called Scrollable ResultSet object.

If we create JDBC Statement object with type ,mode value then that ResultSet object is called Scrollable ResultSet object.

ex:
	Statement st=con.createStatement(type,mode);
	ResultSet rs=st.executeQuery("select * from student");

Diagram: jdbc7.1

We have three Type values.
ex:
	ResultSet.TYPE_SCROLL_SENSITIVE
	ResultSet.TYPE_SCROLL_INSENSITIVE
	ResultSet.TYPE_FORWARD_ONLY

We have two mode values.
ex:
	ResultSet.CONCUR_UPDATABLE
	ResultSet.CONCUR_READ_ONLY 

Various methods present in Scrollable ResultSet object
-------------------------------------------------------

rs.next()
---------
	It is used to move record pointer to next position.

rs.getXxx()
-----------
	It is used to read the values from record ResultSet.

rs.getRow()
----------
	It is used to return position of record pointer.

rs.close()
----------
	It is used to close ResultSet object.

rs.first()
----------
	It is used to keep the record pointer to first record.

rs.isFirst()
------------
	It is used to check record pointer is in first position or not.

rs.last()
---------
	It is used to keep the record pointer to last record.
	
rs.isLast()
------------
	It is ued to check record pointer is in last position or not.

rs.previous()
-------------
	It will move the record pointer to previous position from current 	position.


rs.beforeFirst()
---------------
	It will set the record pointer to BFR position.

rs.afterLast()
-------------
	IT will set the record pointer to ALR position.

rs.relative(+/-)
-----------------	
	It will move the record pointer to next position based on current 	position.

rs.absoluate(+/-)
-----------------
	It will move the record pointer to next position based on BFR and ALR.

ex:
----
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class ScrollableRSApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		Statement st=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
		
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		
		//top to bottom
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.afterLast();
		while(rs.previous())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.first();
		System.out.println(rs.isFirst());//true 
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		rs.last();
		System.out.println(rs.isLast());
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		//rs.relative(-2);
		rs.absolute(-2);
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		rs.close();
		st.close();
		con.close();
	}
}


Batch Processing
================
Batch processing is used to declare multiple queries in a batch and makes a single class to database.

To add the queries in batch we need to use addBatch() method of Statement obj.
ex:
	st.addBatch(qry);

To execute the batch we need to executeBatch() method of Statement object.
ex:
	st.executeBatch();

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

public class BatchProcessingApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		
		//create a queries
		String qry1="insert into student values(105,'ramulu','vizag')";
		String qry2="delete from student where sno=104";
		String qry3="update student set sname='rani' where sno=101";
		
		//add each query to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		st.addBatch(qry3);
		
		//execute the batch
		int[] iarr=st.executeBatch();
		
		int sum=0;
		for(int i:iarr)
		{
			sum+=i;
		}
		System.out.println("No of records effected are ="+sum);
		
		st.close();
		con.close();
	}
}


Transaction Management 
======================

union table
===========
drop table union_bank;
create table union_bank(accno number(6),accholder varchar2(10),accbal number(10));
insert into union_bank values(100001,'subbu',10000);
insert into union_bank values(200002,'sheshu',10000);
commit;

sbi table
========
drop table sbi;
create table sbi(accno number(6),accholder varchar2(10),accbal number(10));
insert into sbi values(111111,'madhu',90000);
insert into sbi values(222222,'mahesh',80000);
commit;

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.Scanner;

public class TXNManagementApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the source account no :");
		int sano=sc.nextInt();
		System.out.println("Enter the destination account no :");
		int dano=sc.nextInt();
		System.out.println("Enter the amount to transfer :");
		int amt=sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		con.setAutoCommit(false);
		
		Statement st=con.createStatement();
		
		String qry1="update sbi set accbal=accbal-"+amt+" where accno="+sano;
		String qry2="update union_bank set accbal=accbal+"+amt+" where accno="+dano;

		//add the queries to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		
		//execute the batch
		int[] iarr=st.executeBatch();
		
		boolean flag=true;
		for(int i:iarr)
		{
			if(i==0)
			{
				flag=false;
			}
		}
		if(flag==true)
		{
			System.out.println("Transaction Done Successfully");
			con.commit();
		}
		else
		{
			System.out.println("Transaction Failed!!");
			con.rollback();
		}
		st.close();
		con.close();
	}
}


JDBC Standard Application
==========================
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class MySQLApp 
{
	public static void main(String[] args)
	{
		final String DRIVER="oracle.jdbc.driver.OracleDriver";
		final String URL="jdbc:oracle:thin:@localhost:1521:XE";
		final String USERNAME="system";
		final String PASSWORD="admin";
		final String QUERY="select * from student";
		
		Connection con=null;
		Statement st=null;
		ResultSet rs=null;
		try
		{
			Class.forName(DRIVER);
			con=DriverManager.getConnection(URL,USERNAME,PASSWORD);
			st=con.createStatement();
			rs=st.executeQuery(QUERY);
			while(rs.next())
			{
				System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
			}
			
			rs.close();
			st.close();
			con.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
	}
}


Steps to interact with MYSQL Database
===================================
step1:
------
	Download and Install MY/SQL Database successully.
	ex:
	https://drive.google.com/file/d/1QQjWTJ9v8xz0nfuSGva1_QQwO6KDf9_c/view?usp=sharing

step2:
--------
	Connect with mysql by using password.
	ex:
	username : root( default)
	password: root

step3:
-------
	create a SCHEMA in MYSQL.
	ex:
		create schema IH_JAVA_022

step4:
-------
	To check list of databases /schemas present in mysql db.
	ex:
		show databases;

step5:
-------
	Use IH_JAVA_016 scheme/database.	
	ex:
		use   IH_JAVA_022;

step6:
---------
	create a student table and insert the records.
	ex:
	create table student(sno int(3),sname varchar(10),sadd varchar(10));
	insert into student values(101,'raja','hyd');
	insert into student values(102,'raju','delhi');
	insert into student values(103,'ravi','pune');
	commit;
step7:
---------
	create a JDBC Application to select student records.

MySQLApp.java
------------------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class MySQLApp 
{
	public static void main(String[] args) 
	{
		final String DRIVER="com.mysql.jdbc.Driver";
final String URL="jdbc:mysql://localhost:3306/IH_JAVA_022?characterEncoding=utf8";
		final String USERNAME="root";
		final String PASSWORD="root";
		final String QUERY="select * from student";
		
		Connection con=null;
		Statement st=null;
		ResultSet rs=null;
		try
		{
			Class.forName(DRIVER);
			con=DriverManager.getConnection(URL,USERNAME,PASSWORD);
			st=con.createStatement();
			rs=st.executeQuery(QUERY);
			while(rs.next())
			{
				System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
			}
			
			rs.close();
			st.close();
			con.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
}

step8:
--------
	Add "mysql-connector.jar" file in project build path for mysql database.

	right click to project --> built path --> configuration build path --> libraries
	--> add external jars --> select mysql-connector.jar file --> open.


	jar file download : 		
	http://www.java2s.com/Code/Jar/m/Downloadmysqlconnectorjar.htm

	http://www.java2s.com/Code/Jar/m/Downloadmysqlconnectorjavajar.htm

	Note:
	ojdbc14.jar  - - for oracle 	
	mysql-connector.jar -->  for mysql 

step9:
--------
	Run the jdbc application.



























































































